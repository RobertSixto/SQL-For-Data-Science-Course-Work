Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =10000
ii. Business table =10000
iii. Category table =10000
iv. Checkin table =10000
v. elite_years table =10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo =10000
viii. Tip = 537 (user_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	NO
	
	SQL code used to arrive at answer:
	select *
	from user
	where id IS NULL 
	OR name IS NULL
	OR review_count IS NULL
	OR yelping_since IS NULL
	OR useful IS NULL
	OR funny IS NULL
	OR cool IS NULL
	OR fans IS NULL
	OR average_stars IS NULL
	OR compliment_hot IS NULL
	OR compliment_more IS NULL
	OR compliment_profile IS NULL
	OR compliment_cute IS NULL
	OR compliment_list IS NULL
	OR compliment_note IS NULL
	OR compliment_plain IS NULL
	OR compliment_cool IS NULL
	OR compliment_funny IS NULL
	OR compliment_writer IS NULL
	OR compliment_photos IS NULL
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT city, 
	SUM(review_count) as city_sum
	FROM business
	GROUP BY city
	order by city_sum DESC
	
	
	Copy and Paste the Result Below:
+-----------------+----------+
| city            | city_sum |
+-----------------+----------+
| Las Vegas       |    82854 |
| Phoenix         |    34503 |
| Toronto         |    24113 |
| Scottsdale      |    20614 |
| Charlotte       |    12523 |
| Henderson       |    10871 |
| Tempe           |    10504 |
| Pittsburgh      |     9798 |
| MontrÃ©al        |     9448 |
| Chandler        |     8112 |
| Mesa            |     6875 |
| Gilbert         |     6380 |
| Cleveland       |     5593 |
| Madison         |     5265 |
| Glendale        |     4406 |
| Mississauga     |     3814 |
| Edinburgh       |     2792 |
| Peoria          |     2624 |
| North Las Vegas |     2438 |
| Markham         |     2352 |
| Champaign       |     2029 |
| Stuttgart       |     1849 |
| Surprise        |     1520 |
| Lakewood        |     1465 |
| Goodyear        |     1155 |
+-----------------+----------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

select stars as star_rating,
review_count as count
FROM business 
WHERE city = 'Avon'


Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.5 |     3 |
|         4.0 |     4 |
|         5.0 |     3 |
|         3.5 |     7 |
|         1.5 |    10 |
|         3.5 |    31 |
|         4.5 |    31 |
|         3.5 |    50 |
|         2.5 |     3 |
|         4.0 |    17 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

select stars as star_rating,
review_count as count
FROM business 
WHERE city = 'Beachwood'

Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         3.0 |     8 |
|         3.0 |     3 |
|         4.5 |    14 |
|         5.0 |     6 |
|         4.0 |    69 |
|         4.5 |     3 |
|         5.0 |     4 |
|         2.0 |     8 |
|         3.5 |     3 |
|         3.5 |     3 |
|         5.0 |     6 |
|         2.5 |     3 |
|         5.0 |     3 |
|         5.0 |     4 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	select name,
	review_count
	FROM user 
	ORDER BY review_count DESC
	LIMIT 3
	
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	Yes it does. The average number of reviews per user is 24. Users with more than 24 reviews have on average around 7.43 fans
	whereas users with less than or equal to 24 reviews have on average around 0.19 fans. 
	Therefore, those posting more reviews than average have more average fans than those posting less reviews.
	
	code:
	3 queries(can be simplified to 2 with union of final 2 queries)
	
	select AVG(review_count)
	FROM user

	select AVG(fans) 
	FROM user
	where review_count>24
	

	select AVG(fans)
	FROM user
	where review_count<=24


	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	Love, although code does not count every instance of word love or hate in a review
	only first occurence.
	
	SQL code used to arrive at answer:
	select 'love' as word, count(text)
	FROM review
	where text like "%love%"
	UNION
	select 'hate' as word, count(text)
	FROM review
	where text like "%hate%"
	output:
+------+-------------+
| word | count(text) |
+------+-------------+
| hate |         232 |
| love |        1780 |
+------+-------------+
	

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	select name, fans, review_count
	from user
	ORDER BY fans DESC
	LIMIT 10

	
	Copy and Paste the Result Below:
NOTE: I KNOW REVIEW_COUNT WAS NOT NECESSARY BUY CHOSE TO INCLUDE IT BECUASE IT SUPPORTS MY ANSWER TO QUESTION 8
+-----------+------+--------------+
| name      | fans | review_count |
+-----------+------+--------------+
| Amy       |  503 |          609 |
| Mimi      |  497 |          968 |
| Harald    |  311 |         1153 |
| Gerald    |  253 |         2000 |
| Christine |  173 |          930 |
| Lisa      |  159 |          813 |
| Cat       |  133 |          377 |
| William   |  126 |         1215 |
| Fran      |  124 |          862 |
| Lissa     |  120 |          834 |
+-----------+------+--------------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

NOTE: FOR THIS ANALYSIS I CONSIDER ANY RESTAURANT BETWEEN 3 AND 4 STARS A 3 STAR RESTAURANT WHEN AGGREGATING DATA. SO A RESTAURANT WITH 3.5 STARS FOR INSTANCE IS CONSIDERED A 3 STAR RESTAURANT.

i. Do the two groups you chose to analyze have a different distribution of hours?
	
Slightly, 4-5 star restaurants are open an average of 10 hours, while 2-3 star resaturants are open an average of 12.

ii. Do the two groups you chose to analyze have a different number of reviews?
The restaurants with ratings between 2 and 3 stars have on averag more reviews than restaurants with ratings between 4 and 5 stars: 22.5 vs 20.5 reviews
 
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
I was unable to infer any interesting insights from the locational data. 
I tried to see if 4-5 star restaurants were grouped in a different, perhaps more expensive, zip code than 2-3 star
restaurants but my query returned all restaurants in my search city and category to be in different zip codes. 
I tried returning the rest of the geographical data available, but nothing provided an insightful inferences.


SQL code used for analysis:

Q1 PART 1 CODE:

SELECT b.name, b.city, b.stars, c.category, h.hours , b.review_count
FROM business b INNER JOIN category c
ON b.id = c.business_id
INNER JOIN hours h ON b.id = h.business_id
WHERE category = 'Bars'
AND city = 'Toronto'
GROUP BY b.stars
ORDER BY b.stars DESC


Q1 PART 2  CODE : 

SELECT 'stars between 2 and 3' AS groups,
AVG(review_count)
FROM (SELECT b.name, b.city, b.stars, c.category, h.hours , b.review_count
FROM business b INNER JOIN category c
ON b.id = c.business_id
INNER JOIN hours h ON b.id = h.business_id
WHERE category = 'Bars'
AND city = 'Toronto'
GROUP BY b.stars
ORDER BY b.stars DESC)
WHERE stars>=2 AND stars<4
UNION
SELECT 'stars between 4 and 5' AS groups,
AVG(review_count)
FROM (SELECT b.name, b.city, b.stars, c.category, h.hours , b.review_count
FROM business b INNER JOIN category c
ON b.id = c.business_id
INNER JOIN hours h ON b.id = h.business_id
WHERE category = 'Bars'
AND city = 'Toronto'
GROUP BY b.stars
ORDER BY b.stars DESC)
WHERE stars>=4 AND stars<=5;

Q1 PART 3 CODE:

SELECT b.name, b.city, b.stars, c.category, h.hours , b.review_count, b.postal_code, b.state, latitude, longitude
FROM business b INNER JOIN category c
ON b.id = c.business_id
INNER JOIN hours h ON b.id = h.business_id
WHERE category = 'Bars'
AND city = 'Toronto'
GROUP BY b.stars
ORDER BY b.stars DESC

		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

 Closed restaurants had slightly lower average stars: 3.52 vs 3.68  
         
ii. Difference 2:
         
 Closed restaurants had significantly less reviews: 23.19 vs 31.76 
         
SQL code used for analysis:

SELECT 'closed' AS groups, AVG(stars), AVG(review_count)
FROM business
WHERE is_open = 0
UNION
SELECT 'open' AS groups, AVG(stars), AVG(review_count)
FROM business
WHERE is_open = 1
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
For my analysis I wanted to see if users who had a higher 'funny rating' had more or less fans on average. In my analysis I want to account for the potential third variable of review count
influencing the funny rating users recieve, since with more reviews, someone is probably likely to have a higher funny rating, regardless of if they are less funny than someone with only a few.
For instance, one funny reaction on 10 reviews does not mean someone is funnier than someone with 9 funny reactions on one review.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
For this analysis I can get all my data from the user table. I will need the funny rating for every user, the fans for every user, and the average funny rating for the set of all users. If I want to account
for user's review quantity not skewing the data set, I will need to pull review count for each user as well. I can divide my analysis into two groups. Those who have a higher than average funny rating and those that have a lower than 
average funny rating. For both groups I can take the average number of fans, the average funny rating, and the average review count. To confirm that users in the funny group are truly funnier on a review by 
review basis and are not just funnier because they leave more reviews, I can divide the average funny rating of the funny group by the average review count of the funny group and if the ratio is higher than
the same calculation for the not funny group, then I can conclude that the funny group is truly funnier on a review by review basis. This could help my analyis in trying to determine whether fan numbers are
influenced due to users being funnier.                
                  
iii. Output of your finished dataset:

+------------+
| AVG(funny) |
+------------+
|    24.7927 |
+------------+

+----------+---------------+----------------+-------------------+------------------------------+
| groups   |     AVG(fans) |     AVG(funny) | AVG(review_count) | AVG(funny)/AVG(review_count) |
+----------+---------------+----------------+-------------------+------------------------------+
| funny    | 24.2065868263 |  713.476047904 |     225.505988024 |                3.16388958961 |
| notfunny |  0.7046348024 | 0.995861783571 |     17.3469894475 |              0.0574083351225 |
+----------+---------------+----------------+-------------------+------------------------------+
         
iv. Provide the SQL code you used to create your final dataset:

QUERY 1:
select AVG(funny)
from user

QUERY 2:
select 'notfunny' as groups, 
AVG(fans),
AVG(funny),
AVG(review_count),
AVG(funny)/AVG(review_count)
FROM user 
WHERE funny < 24.7927
UNION
select 'funny' as groups, 
AVG(fans),
AVG(funny), 
AVG(review_count),
AVG(funny)/AVG(review_count)
FROM user 
WHERE funny > 24.7927